nametype Id = {0,1,2,3}
nametype Timeslots = {1..10}
channel set_idle, set_eager, set_waiting, set_active, start_task : Id
channel request: Id.Timeslots
channel tick,empty
channel push, pop : Id.Timeslots

datatype TaskState = idle|eager|waiting|active  

QUEUE(<>) = push?id -> QUEUE(<id>)
			[]
		    empty -> QUEUE(<>)
QUEUE(<h>) = pop!h -> QUEUE(<>)
QUEUE(<h>^s) = pop!h -> QUEUE(s)
				[]
			   push?id -> QUEUE(<id>^<h>^s)


TASK(id, time, idle) = 	start_task.id -> TASK(id, time, eager)
						
TASK(id, time, eager) = request!id.time -> set_waiting.id -> TASK(id, time, waiting)
						[]
						request!id.time -> set_active.id -> TASK(id, time, active)
						
TASK(id, time, waiting) = set_active.id -> TASK(id, time, active)

--Dummy Task wechselt direkt zwischen active und waiting
TASK(id, time, active) = set_idle.0 -> TASK(0, 3, waiting)
						[]
						set_idle.id -> TASK(id, time, idle)

--Zeit ist 0 -> alten Task descedulen und dummy Task oder konkreten Task von der Queue starten
--Timer nur indirekt eingebaut, dadurch kann dieser nicht regelmäßig laufen
SCHED(0, id) = set_idle!id -> pop?newid.time -> set_active!newid -> SCHED(time, newid)
				[]
				set_idle!id -> empty -> set_active!0 -> SCHED(3, 0)
				[]
			   request?newid.newtime -> push!newid.newtime -> set_waiting!newid -> SCHED(0, id)
			   
-- Zeit != 0 -> Request zwischen den Ticks annehmen und in Warteliste setzen
SCHED(time, id) = request?newid.newtime -> push!newid.newtime -> set_waiting!newid -> SCHED(time-1, id)
				  []
				  SCHED(time-1, id)	
				  
				  


TIMER = tick -> TIMER

TASK_INIT = (TASK(0, 3, active) ||| TASK(1, 3, idle) ||| TASK(2, 5, idle) ||| TASK(3, 6, idle))
SYS = TASK_INIT [|{|request, set_waiting, set_active, set_idle|}|] (SCHED(3,0) [|{|push, pop, empty|}|] QUEUE(<>))-- [|{|tick|}|] TIMER)



--------------TEST
-- Tests werden mit Stop beendet, da die Anwendung in einer Endlosschleife läuft und dadurch nicht mit einem Tick beendet werden kann.
A = {|set_eager, pop, push|}
T0 = start_task.1 -> request.1.3 -> set_waiting.1 -> set_idle.0 ->  set_active.1 -> set_idle.1 -> empty -> set_active.0  -> STOP
assert SYS \ A [T=T0

T1 = start_task.1 -> start_task.2 -> start_task.3 
	-> request.1.3 -> set_waiting.1 -> set_idle.0 ->  set_active.1 -> request.2.5 
	-> set_waiting.2 -> set_idle.1 ->  set_active.2 -> set_idle.2 
	-> empty -> set_active.0 -> request.3.6 -> set_waiting.3 
	-> set_idle.0 -> set_active.3 -> set_idle.3 -> empty -> set_active.0 -> STOP
	
assert SYS \ A [T=T1

