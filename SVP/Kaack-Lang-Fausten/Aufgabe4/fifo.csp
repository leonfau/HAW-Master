nametype Id = {0,1,2,3}
nametype Timeslots = {1..10}
channel set_idle, set_eager, set_waiting, set_active, start_task : Id
channel request: Id.Timeslots
channel tick
channel push, pop : Id.Timeslots

datatype TaskState = idle|eager|waiting|active  

QUEUE(<>) = push?id -> QUEUE(<id>)
			[]
			pop!0.3 -> QUEUE(<>)
QUEUE(<h>) = pop!h -> QUEUE(<>)
QUEUE(<h>^s) = pop!h -> QUEUE(s)
[]
push?id -> QUEUE(<id>^<h>^s)

TASK(id, time, idle) = start_task.id -> TASK(id, time, eager)
TASK(id, time, eager) = request!id.time -> set_waiting.id -> TASK(id, time, waiting)
TASK(id, time, waiting) = set_active.id -> TASK(id, time, active)
TASK(id, time, active) = set_idle.id -> TASK(id, time, idle)

--Zeit ist 0 -> alten Task descedulen und dummy Task oder konkreten Task von der Queue starten
SCHED(0, id) = set_idle!id -> pop?newid.time -> set_active!newid -> SCHED(time, newid)
				[]
			   request?newid.newtime -> push!newid.newtime -> set_waiting!newid -> SCHED(0, id)
			   
-- Zeit != 0 -> Request zwischen den Ticks annehmen und in Warteliste setzen
SCHED(time, id) = request?newid.newtime -> push!newid.newtime -> set_waiting!newid -> SCHED(time-1, id)
				  []
				  SCHED(time-1, id)		
		
TIMER = tick -> TIMER

TASK_INIT = (TASK(0, 3, idle) ||| TASK(1, 3, idle) ||| TASK(2, 5, idle) ||| TASK(3, 6, idle))
SYS = TASK_INIT [|{|request, set_waiting, set_active, set_idle|}|] (SCHED(3,0) [|{|push, pop|}|] QUEUE(<>))-- [|{|tick|}|] TIMER)



--------------TEST
assert SYS :[deadlock free [F]]


A = {|set_eager, pop, push|}
T0 = start_task.1 -> request.1.3 -> push.1.3 -> set_waiting.1 ->  set_active.1 -> set_idle!1 -> SKIP
assert SYS [T=T0 

--T1 = request?1 -> request!2 -> set_active!1 -> set_active!2 -> set_idle!1 -> SKIP
--assert SYS [T=T1
