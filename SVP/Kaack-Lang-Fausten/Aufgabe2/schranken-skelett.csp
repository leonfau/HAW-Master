-- Spezifikation Schrankensystem mit Prüfungen
-- Übung TH2, WS 11/12

------------
--Datentypen 
------------ 

 nametype ZId = {0,1,2,3}  
 datatype SegId = l1|l2|r1|r2 -- links 1 und 2, rechts 1 und 2 
 datatype SigStates = r|g -- Signalzustand rot, grün 
 datatype SegState = unten|oben|senken|heben -- Segmentzustand 
 channel zug_kommt, zug_rein, zug_raus: ZId 
 channel df_anfrage, df_freigabe: ZId  -- Durchfahrt Anfrage und Freigabe 
 channel seg_senken, seg_heben, seg_unten, seg_oben: SegId

------------
--Basisprozesse
------------ 


SEGMENT (id, status) = (status ==oben & seg_senken?id -> SEGMENT(id, senken))
					   []
					   (status == senken & (seg_heben?id -> SEGMENT(id, heben)) [] (seg_unten?id -> SEGMENT(id, unten)))
					   []
					   (status == unten & seg_heben?id -> SEGMENT(id, heben))
					   []
					   (status == heben & (seg_senken?id -> SEGMENT(id, senken)) 
										   [] (seg_oben?id -> SEGMENT(id, oben)))
					   
			
SENKEN() = seg_senken!r1 -> seg_senken!r2 -> 
					((seg_unten.r1 -> seg_unten.r2 -> SENKEN_LINKS()) 
					[] 
					(seg_unten.r2 -> seg_unten.r1-> SENKEN_LINKS()))
	
SENKEN_LINKS() = seg_senken!l1 -> seg_senken!l2 -> 
					((seg_unten.l1 -> seg_unten.l2 -> SKIP) 
					[] 
					(seg_unten.l2 -> seg_unten.l1-> SKIP))
					
HEBEN() = seg_heben!l1 -> seg_heben!l2 -> seg_heben!r1 -> seg_heben!r2 -> SKIP
					
					
STEUER() = df_anfrage?zid  -> FREIGEBEN(zid)
FREIGEBEN(zid) = SENKEN() ; df_freigabe!zid -> zug_rein?zid -> zug_raus?zid -> HEBEN() ; STEUER()

SIGNAL (state) = (df_freigabe?zid -> SIGNAL(g))
				[]
				(zug_rein?zid -> SIGNAL(r))


ZUG (zid) = zug_kommt.zid -> df_anfrage!zid -> df_freigabe?zid -> zug_rein.zid -> zug_raus.zid -> ZUG(zid)

-----------
--Gesamtsystem
------------ 
SEG_INIT = SEGMENT(l1,oben) ||| SEGMENT(l2,unten) ||| SEGMENT(r1,oben) ||| SEGMENT(r2,oben)
ZUG_INIT = ZUG(0) ||| ZUG(1) ||| ZUG(2) ||| ZUG(3)

ZUG_STEUER = ZUG_INIT [|{|df_anfrage, df_freigabe, zug_rein, zug_raus|}|] STEUER()
SYS = (SIGNAL(r)[|{|df_freigabe, zug_rein|}|] ZUG_STEUER) 
		[|{| seg_senken, seg_heben, seg_unten|}|] 
		SEG_INIT



------------
--Prüfungen
------------ 

-- Zug fährt nur wenn alle Schranken unten sind
UNTENR = (seg_unten.r1 -> seg_unten.r2 -> SKIP) [] (seg_unten.r2 -> seg_unten.r1 -> SKIP)
UNTENL = (seg_unten.l1 -> seg_unten.l2 -> SKIP) [] (seg_unten.l2 -> seg_unten.l1 -> SKIP)
--Vorgabe: Rechte Schranken schließen vor linken
T1 = UNTENR; UNTENL; zug_rein?zid -> zug_raus.zid -> T1
-- Irrelevante channels
A = {| zug_kommt, df_anfrage, df_freigabe, seg_senken, seg_heben, seg_oben |}
assert T1 [T= SYS \ A


-- Kein Zug ist dauerhaft blockiert
--Wenn der Zug raus fährt wurde er nicht blockiert.
Z_RAUS(zid) = zug_raus.zid -> SKIP

TN4(a,b,c,d) = Z_RAUS(a); Z_RAUS(b); Z_RAUS(c); Z_RAUS(d); SKIP

--Jeder mögliche Reihenfolge des Durchfahrens manuell modelliert
TN = (TN4(0,1,2,3) ;TN)|~|
	(TN4(0,1,3,2) ;TN)|~|
	(TN4(0,2,1,3) ;TN)|~|
	(TN4(0,2,3,1) ;TN)|~|
	(TN4(0,3,1,2) ;TN)|~|
	(TN4(0,3,2,1) ;TN)|~|

	
	(TN4(1,0,2,3) ;TN)|~|
	(TN4(1,0,3,2) ;TN)|~|
	(TN4(1,2,0,3) ;TN)|~|
	(TN4(1,2,3,0) ;TN)|~|
	(TN4(1,3,0,2) ;TN)|~|
	(TN4(1,3,0,1) ;TN)|~|
	
	(TN4(2,0,1,3) ;TN)|~|
	(TN4(2,0,3,1) ;TN)|~|
	(TN4(2,1,0,3) ;TN)|~|
	(TN4(2,1,3,0) ;TN)|~|
	(TN4(2,3,0,1) ;TN)|~|
	(TN4(2,3,1,0) ;TN)|~|

	(TN4(3,0,1,2) ;TN)|~|
	(TN4(3,0,3,2) ;TN)|~|
	(TN4(3,1,0,2) ;TN)|~|
	(TN4(3,1,2,0) ;TN)|~|
	(TN4(3,2,0,1) ;TN)|~|
	(TN4(3,2,1,0) ;TN)

assert SYS \ {| zug_kommt, zug_rein, df_anfrage, df_freigabe, seg_senken, seg_heben, seg_oben, seg_unten |} [T= TN
